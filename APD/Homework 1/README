Nume: Mateescu Viorel-Cristian
Grupa: 332CB

Cateva detalii legate de implementare:
    - am inceput prin a paraleliza for-urile din run_genetic_algorithm folosind formulele de impartire a unui array pe
    thread-uri din laboratorul 1: int start = ID * (double)N / P;
                                  int end = min((ID + 1) * (double)N / P, N);

    - rezultatele erau diferite la fiecare rulare din cate tin minte si am realizat ca am nevoie de o bariera pentru a
    sincroniza thread-urile, respectiv pentru ca niciun thread sa nu poate trece mai departe la urmatorul for
    paralelizat pana cand nu termina toate executia for-ului curent.

    - am observat ca pot combina for-urile de mutatie bit string intr-un singur for paralel deoarece unul se executa pe
    primii 20% indivizi ai generatiei curente, iar celalalt pe urmatorii 20%.

    - in continuare nu obtineam rezultate multumitoare, insa nu voiam sa paralelizez sort-ul (nu stiu de ce, nici eu
    nu-mi explic de ce mi se parea atat de greu de facut asta la momentul respectiv:))) asa ca am inceput sa ma uit prin
    tot codul in cautarea unei solutii si am observat ca functia de comparatie a qsort-ului/merge-sort-ului actual ar
    putea fi eficientizata (sa nu se mai calculeze la fiecare comparatie first_count/second_count ci sa se calculeze o
    singura data per generatie pentru fiecare individ acest count folosind un for paralelizat si sa se stocheze valoarea
    intr-un camp al individului, iar la comparatii doar sa se interogheze aceasta valoare). M-am gandit totusi ca
    aceasta solutie nu face scopul temei si ca ar trebui totusi sa paralelizez sortarea, desi se obtineau niste
    acceleratii foarte bune cu metoda de mai sus (chiar mai bune decat cele obtinute dupa paralelizarea sortarii).

    - am pornit de la implementarea din laborator, dar aceasta functiona doar pentru n putere a lui 2 :(. Am folosit
    indicii de start si end de la laboratorul 3 pentru a imparti array-ul thread-urilor si a realiza sortarea paralela:
    int start = ID * (double)N / P;
    int end = (ID + 1) * (double)N / P - 1;
    Ideea e ca fiecare thread sorteaza folosind merge-sort cate un sub array al array-ului folosind practic algoritmul
    merge sort clasic (am preluat functia de merge din laboratorul 3 si am editat-o putin). Dupa ce fiecare thread si-a
    terminat sortarea sub array-urile sortate trebuie merge-uite: astfel, iau ca array de baza sub array-ul sortat de
    thread-ul 0, il merge-uiesc cu un sub array sortat al altui thread si actualizez array-ul de baza cu noul array
    obtinut si repet pana cand am merge-uit toate sub array-urile.

    - pentru a stoca toate informatiile necesare executiei algoritmului genetic mi-am definit structurile *AGeneticArgs,
     respectiv TGeneticArgs (aveam nevoie de o referinta comuna tuturor thread-urilor pentru a lucra fiecare paralel pe
     datele genetice).

    - pentru a stoca toate informatiile necesare executiei algoritmului genetic pe thread-uri mi-am definit structurile
    *AThreadArgs, TThreadArgs care contin informatiile necesare executiei algoritmului genetic (un pointer la o
    structura TGeneticArgs - AGeneticArgs genetic_info), id-ul thread-ului curent, numarul de thread-uri utilizate si
    bariera pentru sincronizarea thread-urilor).

    - astfel in main creez si initializez structura pentru informatiile genetice, citesc input-ul (functie la care am
    adaugat si parsarea numarului de thread-uri), creez un vector de TThreadArgs care va stoca argumentele cu care va fi
    pornit fiecare thread, initializez bariera, creez thread-urile, le dau join, se executa algoritmul genetic paralel
    si se afiseaza rezultatele, iar in final distrug bariera si eliberez memoria ramasa alocata.

    - am observat ca start-ul pentru thread-uri este identic atat in cazul sortarii, cat si in cazul unui for paralel,
    doar end-ul diferind, asa ca mi-am definit o functie care calculeaza indicii de sub array ai fiecarui thread in
    functie de operatia dorita: #define SORT 1
                                #define NOT_SORT 0

    - ulterior am incercat sa modularizez codul si am impartit run_genetic_algorithm pe functii.

    - sincer e destul de greu sa faci debugging pe thread-uri, dar majoritatea problemelor pe care le-am intalnit au
    fost generate de sincronizarea incorecta a thread-urilor sau de greseli logice facute de mine.
